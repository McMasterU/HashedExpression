box: hashexpression/wercker
no-response-timeout: 10

build:
  steps:
    - script:
        name: build & test
        code: |
          stack build --test --fast

build-release:
  steps:
    - script:
        name: build & test
        code: |
          stack build --test --ghc-options -O2 --copy-bins --local-bin-path bins


create-release:
  box: ubuntu
  steps:
    - install-packages:
        packages: curl file
    - script:
        name: Get release version
        code: |
          export RELEASE_VERSION=$(cat VERSION)
    # - script:
    #     name: Create symphony archive
    #     code: |
    #       tar czf symphony-$RELEASE_VERSION-linux.tar.gz --directory=bins symphony
    - script:
        name: Create lbfgs-b archive
        code: |
          tar czfh lbfgs-b-$RELEASE_VERSION.tar.gz --directory=solvers/lbfgs-b `ls solvers/lbfgs-b`
    - script:
        name: Create ipopt archive
        code: |
          tar czfh ipopt-$RELEASE_VERSION.tar.gz --directory=solvers/ipopt `ls solvers/ipopt`
    - wercker/github-create-release@2.1.1:
        token: $GITHUB_TOKEN
        tag: v$RELEASE_VERSION
        title: v$RELEASE_VERSION
    # - wercker/github-upload-asset@2.1.1:
    #     token: $GITHUB_TOKEN
    #     file: symphony-$RELEASE_VERSION-linux.tar.gz
    - wercker/github-upload-asset@2.1.1:
        token: $GITHUB_TOKEN
        file: ipopt-$RELEASE_VERSION.tar.gz
    - wercker/github-upload-asset@2.1.1:
        token: $GITHUB_TOKEN
        file: lbfgs-b-$RELEASE_VERSION.tar.gz



# create-docker-image:
#   box: hashexpression/symphony_env
#   steps:
#     - script:
#         name: Remove unncessary directories & files
#         code: |
#           rm -rf .stack-work
#           rm -rf .git
#     - script:
#         name: Copy symphony to PATH
#         code: |
#           cp bins/symphony /usr/bin
#     - internal/docker-push:
#         username: $DOCKERHUB_USERNAME # Registry username
#         password: $DUCKERHUB_PASSWORD # Registry password
#         repository: hashexpression/symphony


