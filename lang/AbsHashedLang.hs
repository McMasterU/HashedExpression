-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsHashedLang where

newtype KWDataPattern = KWDataPattern String
  deriving (Eq, Ord, Show, Read)

newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Problem = Problem [Block]
  deriving (Eq, Ord, Show, Read)

data Block
    = BlockVariable [[VariableDecl]]
    | BlockConstant [[ConstantDecl]]
    | BlockConstraint [[ConstraintDecl]]
    | BlockLet [[LetDecl]]
    | BlockMinimize Exp
  deriving (Eq, Ord, Show, Read)

data TInt = IntPos Integer | IntNeg Integer
  deriving (Eq, Ord, Show, Read)

data TDouble = DoublePos Double | DoubleNeg Double
  deriving (Eq, Ord, Show, Read)

data Number = NumInt TInt | NumDouble TDouble
  deriving (Eq, Ord, Show, Read)

data Val
    = ValFile String
    | ValDataset String String
    | ValPattern KWDataPattern
    | ValRandom
    | ValLiteral Number
  deriving (Eq, Ord, Show, Read)

data Dim = Dim Integer
  deriving (Eq, Ord, Show, Read)

data Shape
    = ShapeScalar | Shape1D Dim | Shape2D Dim Dim | Shape3D Dim Dim Dim
  deriving (Eq, Ord, Show, Read)

data VariableDecl
    = VariableNoInit PIdent Shape | VariableWithInit PIdent Shape Val
  deriving (Eq, Ord, Show, Read)

data ConstantDecl = ConstantDecl PIdent Shape Val
  deriving (Eq, Ord, Show, Read)

data LetDecl = LetDecl PIdent Exp
  deriving (Eq, Ord, Show, Read)

data Bound = ConstantBound PIdent | NumberBound Number
  deriving (Eq, Ord, Show, Read)

data ConstraintDecl
    = ConstraintLower Exp Bound | ConstraintUpper Exp Bound
  deriving (Eq, Ord, Show, Read)

data Offset = OffsetPos Integer | OffsetNeg Integer
  deriving (Eq, Ord, Show, Read)

data RotateAmount
    = RA1D Offset | RA2D Offset Offset | RA3D Offset Offset Offset
  deriving (Eq, Ord, Show, Read)

data PiecewiseCase
    = PiecewiseCase Number Exp | PiecewiseFinalCase Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EPlus Exp Exp
    | ERealImag Exp Exp
    | ESubtract Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EScale Exp Exp
    | EDot Exp Exp
    | EPower Exp TInt
    | EFun PIdent Exp
    | ERotate RotateAmount Exp
    | ENegate Exp
    | ENumDouble Double
    | ENumInteger Integer
    | EIdent PIdent
    | EPiecewise Exp [PiecewiseCase]
  deriving (Eq, Ord, Show, Read)

