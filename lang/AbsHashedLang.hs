-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsHashedLang where

newtype KWVariable = KWVariable String
  deriving (Eq, Ord, Show, Read)

newtype KWConstant = KWConstant String
  deriving (Eq, Ord, Show, Read)

newtype KWDataPattern = KWDataPattern String
  deriving (Eq, Ord, Show, Read)

newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Problem = Problem [Block]
  deriving (Eq, Ord, Show, Read)

data Block
    = BlockVariable VariableBlock | BlockConstant ConstantBlock
  deriving (Eq, Ord, Show, Read)

data Number = NumInt Integer | NumDouble Double
  deriving (Eq, Ord, Show, Read)

data Val
    = ValFile String
    | ValDataset String String
    | ValPattern KWDataPattern
    | ValRandom
    | ValLiteral Number
  deriving (Eq, Ord, Show, Read)

data Dim = Dim Integer
  deriving (Eq, Ord, Show, Read)

data Shape
    = ShapeScalar | Shape1D Dim | Shape2D Dim Dim | Shape3D Dim Dim Dim
  deriving (Eq, Ord, Show, Read)

data VariableDecl
    = VariableNoInit PIdent Shape | VariableWithInit PIdent Shape Val
  deriving (Eq, Ord, Show, Read)

data VariableDeclGroup = VariableDeclGroup [VariableDecl]
  deriving (Eq, Ord, Show, Read)

data VariableBlock = VariableBlock KWVariable [VariableDeclGroup]
  deriving (Eq, Ord, Show, Read)

data ConstantDecl = ConstantDecl PIdent Shape Val
  deriving (Eq, Ord, Show, Read)

data ConstantDeclGroup = ConstantDeclGroup [ConstantDecl]
  deriving (Eq, Ord, Show, Read)

data ConstantBlock = ConstantBlock KWConstant [ConstantDeclGroup]
  deriving (Eq, Ord, Show, Read)

