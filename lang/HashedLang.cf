-- Comment
comment "//" ;
comment "{*" "*/" ;
-- Token
token KWDataPattern
    {"FIRST_ROW_1"}
  | {"LAST_ROW_1"}
  | {"FIRST_COLUMN_1"}
  | {"LAST_COLUMN_1"}
  | {"FIRST_SLICE_1"}
  | {"LAST_SLICE_1"};
position token PIdent (letter (letter|digit|'_'|'\'')*) ;

-- Layout
layout ":";

-- Problem - main entry
Problem. Problem ::= [Block];
BlockVariable. Block ::= "variables" ":" "{" [[VariableDecl]] "}";
BlockVariable. Block ::= "variable" ":" "{" [[VariableDecl]] "}";
BlockConstant. Block ::= "constants" ":" "{" [[ConstantDecl]] "}";
BlockConstant. Block ::= "constant" ":" "{" [[ConstantDecl]] "}";
BlockConstraint. Block ::= "constraints" ":" "{" [[ConstraintDecl]] "}";
BlockConstraint. Block ::= "constraint" ":" "{" [[ConstraintDecl]] "}";
BlockLet. Block ::= "let" ":" "{" [[LetDecl]] "}";
BlockMinimize. Block ::= "minimize" ":" "{" Exp "}";
separator nonempty Block "";

IntPos. TInt ::= Integer;
IntNeg. TInt ::= "-" Integer;

DoublePos. TDouble ::= Double;
DoubleNeg. TDouble ::= "-" Double;

-- Number
NumInt. Number ::= TInt;
NumDouble. Number ::= TDouble;

-- Value
ValFile. Val ::= "File" "(" String ")";
ValDataset. Val ::= "Dataset" "(" String "," String ")";
ValPattern. Val ::= "Pattern" "(" KWDataPattern ")";
ValRandom. Val ::= "Random";
ValLiteral. Val ::= Number;


-- Shape
Dim. Dim ::= "[" Integer "]";
ShapeScalar. Shape ::= ;
Shape1D. Shape ::= Dim;
Shape2D. Shape ::= Dim Dim;
Shape3D. Shape ::= Dim Dim Dim;


-- Variable
VariableNoInit. VariableDecl ::= PIdent Shape;
VariableWithInit. VariableDecl ::= PIdent Shape "=" Val;
separator nonempty VariableDecl ",";
separator nonempty [VariableDecl] ";";

-- Constant
ConstantDecl. ConstantDecl ::= PIdent Shape "=" Val;
separator nonempty ConstantDecl ",";
separator nonempty [ConstantDecl] ";";

-- Let
LetDecl. LetDecl ::= PIdent "=" Exp;
separator nonempty LetDecl ",";
separator nonempty [LetDecl] ";";

-- Constraint
ConstantBound. Bound ::= PIdent;
NumberBound. Bound ::= Number;
ConstraintLower. ConstraintDecl ::= Exp ">=" Bound;
ConstraintUpper. ConstraintDecl ::= Exp "<=" Bound;
separator nonempty ConstraintDecl ",";
separator nonempty [ConstraintDecl] ";";

-- Rotate Amount
OffsetPos. Offset ::= Integer;
OffsetNeg. Offset ::= "-" Integer;
RA1D. RotateAmount ::= "(" Offset ")";
RA2D. RotateAmount ::= "(" Offset "," Offset ")";
RA3D. RotateAmount ::= "(" Offset "," Offset "," Offset ")";

-- Piecewise
PiecewiseCase. PiecewiseCase ::= "it" "<=" Number "->" Exp;
PiecewiseFinalCase. PiecewiseCase ::= "otherwise" "->" Exp;
separator PiecewiseCase ";";

-- Expression
EPlus. Exp ::= Exp "+" Exp1;
ERealImag. Exp ::= Exp "+:" Exp1;
ESubtract. Exp ::= Exp "-" Exp1;
_. Exp ::= Exp1;

EMul. Exp1 ::= Exp1 "*" Exp2;
EDiv. Exp1 ::= Exp1 "/" Exp2;
_. Exp1 ::= Exp2;

EScale. Exp2 ::= Exp2 "*." Exp3;
EDot. Exp2 ::= Exp2 "<.>" Exp3;
_. Exp2 ::= Exp3;

EPower. Exp3 ::= Exp3 "^" TInt;
EPower. Exp3 ::= Exp3 "^" "(" TInt ")";
_. Exp3 ::= Exp4;

EFun. Exp4 ::= PIdent Exp5;
ERotate. Exp4 ::= "rotate" RotateAmount Exp5;
ENegate. Exp4 ::= "-" Exp5;
_. Exp4 ::= Exp5;

_. Exp5 ::= "(" Exp ")";
ENumDouble. Exp5 ::= Double;
ENumInteger. Exp5 ::= Integer;
EIdent. Exp5 ::= PIdent;

EPiecewise. Exp ::= "case" Exp ":" "{" [PiecewiseCase] "}";
