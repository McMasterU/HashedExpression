module SkelHashedLang where

-- Haskell module generated by the BNF converter

import AbsHashedLang
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transKWVariable :: KWVariable -> Result
transKWVariable x = case x of
  KWVariable string -> failure x
transKWConstant :: KWConstant -> Result
transKWConstant x = case x of
  KWConstant string -> failure x
transKWDataPattern :: KWDataPattern -> Result
transKWDataPattern x = case x of
  KWDataPattern string -> failure x
transPIdent :: PIdent -> Result
transPIdent x = case x of
  PIdent string -> failure x
transProblem :: Problem -> Result
transProblem x = case x of
  Problem blocks -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  BlockVariable variableblock -> failure x
  BlockConstant constantblock -> failure x
transNumber :: Number -> Result
transNumber x = case x of
  NumInt integer -> failure x
  NumDouble double -> failure x
transVal :: Val -> Result
transVal x = case x of
  ValFile string -> failure x
  ValDataset string1 string2 -> failure x
  ValPattern kwdatapattern -> failure x
  ValRandom -> failure x
  ValLiteral number -> failure x
transDim :: Dim -> Result
transDim x = case x of
  Dim integer -> failure x
transShape :: Shape -> Result
transShape x = case x of
  ShapeScalar -> failure x
  Shape1D dim -> failure x
  Shape2D dim1 dim2 -> failure x
  Shape3D dim1 dim2 dim3 -> failure x
transVariableDecl :: VariableDecl -> Result
transVariableDecl x = case x of
  VariableNoInit pident shape -> failure x
  VariableWithInit pident shape val -> failure x
transVariableDeclGroup :: VariableDeclGroup -> Result
transVariableDeclGroup x = case x of
  VariableDeclGroup variabledecls -> failure x
transVariableBlock :: VariableBlock -> Result
transVariableBlock x = case x of
  VariableBlock kwvariable variabledeclgroups -> failure x
transConstantDecl :: ConstantDecl -> Result
transConstantDecl x = case x of
  ConstantDecl pident shape val -> failure x
transConstantDeclGroup :: ConstantDeclGroup -> Result
transConstantDeclGroup x = case x of
  ConstantDeclGroup constantdecls -> failure x
transConstantBlock :: ConstantBlock -> Result
transConstantBlock x = case x of
  ConstantBlock kwconstant constantdeclgroups -> failure x

