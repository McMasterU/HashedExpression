{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintHashedLang.
--   Generated by the BNF converter.

module PrintHashedLang where

import qualified AbsHashedLang
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsHashedLang.Ident where
  prt _ (AbsHashedLang.Ident i) = doc (showString i)

instance Print AbsHashedLang.TKShape2D where
  prt _ (AbsHashedLang.TKShape2D i) = doc (showString i)

instance Print AbsHashedLang.TKShape3D where
  prt _ (AbsHashedLang.TKShape3D i) = doc (showString i)

instance Print AbsHashedLang.TKDataPattern where
  prt _ (AbsHashedLang.TKDataPattern i) = doc (showString i)

instance Print AbsHashedLang.Problem where
  prt i e = case e of
    AbsHashedLang.Problem variablesblock constantsblock -> prPrec i 0 (concatD [prt 0 variablesblock, prt 0 constantsblock])

instance Print AbsHashedLang.Number where
  prt i e = case e of
    AbsHashedLang.NumInt n -> prPrec i 0 (concatD [prt 0 n])
    AbsHashedLang.NumDouble d -> prPrec i 0 (concatD [prt 0 d])

instance Print AbsHashedLang.Val where
  prt i e = case e of
    AbsHashedLang.ValFile str -> prPrec i 0 (concatD [doc (showString "File"), doc (showString "("), prt 0 str, doc (showString ")")])
    AbsHashedLang.ValPattern tkdatapattern -> prPrec i 0 (concatD [doc (showString "Pattern"), doc (showString "("), prt 0 tkdatapattern, doc (showString ")")])
    AbsHashedLang.ValRandom -> prPrec i 0 (concatD [doc (showString "Random")])
    AbsHashedLang.ValLiteral number -> prPrec i 0 (concatD [prt 0 number])

instance Print AbsHashedLang.Shape where
  prt i e = case e of
    AbsHashedLang.ShapeScalar -> prPrec i 0 (concatD [])
    AbsHashedLang.Shape1D n -> prPrec i 0 (concatD [prt 0 n])
    AbsHashedLang.Shape2D tkshaped -> prPrec i 0 (concatD [prt 0 tkshaped])
    AbsHashedLang.Shape3D tkshaped -> prPrec i 0 (concatD [prt 0 tkshaped])

instance Print AbsHashedLang.VariableDeclaration where
  prt i e = case e of
    AbsHashedLang.VariableDeclaration id shape val -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 shape, doc (showString "init"), doc (showString "by"), prt 0 val])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsHashedLang.VariableDeclaration] where
  prt = prtList

instance Print AbsHashedLang.VariablesBlock where
  prt i e = case e of
    AbsHashedLang.VariablesBlock variabledeclarations -> prPrec i 0 (concatD [doc (showString "variables"), doc (showString "{"), prt 0 variabledeclarations, doc (showString "}")])

instance Print AbsHashedLang.ConstantDeclaration where
  prt i e = case e of
    AbsHashedLang.ConstantDeclaration id shape val -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 shape, doc (showString "read"), doc (showString "from"), prt 0 val])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsHashedLang.ConstantDeclaration] where
  prt = prtList

instance Print AbsHashedLang.ConstantsBlock where
  prt i e = case e of
    AbsHashedLang.NoConstantsBlock -> prPrec i 0 (concatD [])
    AbsHashedLang.ConstantsBlock constantdeclarations -> prPrec i 0 (concatD [doc (showString "constants"), doc (showString "{"), prt 0 constantdeclarations, doc (showString "}")])

