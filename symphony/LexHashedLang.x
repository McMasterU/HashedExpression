-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexHashedLang where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \: | \{ | \} | \( | \) | \, | \[ | \] | \= | \; | \> \= | \< \= | \= \= | \- \>

:-
"//" [.]* ; -- Toss single line comments
"{*" ([$u # \*] | \*+ [$u # [\* \/]])* ("*")+ "/" ;

$white+ ;
@rsyms
    { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
L B F G S \- B | l b f g s \- b | l b f g s b | i p o p t | I P O P T
    { tok (\p s -> PT p (eitherResIdent (T_SolverName . share) s)) }
F I R S T \_ R O W \_ 1 | L A S T \_ R O W \_ 1 | F I R S T \_ C O L U M N \_ 1 | L A S T \_ C O L U M N \_ 1 | F I R S T \_ R O W \_ 0 | L A S T \_ R O W \_ 0 | F I R S T \_ C O L U M N \_ 0 | L A S T \_ C O L U M N \_ 0 | F I R S T \_ S L I C E \_ 1 | L A S T \_ S L I C E \_ 1
    { tok (\p s -> PT p (eitherResIdent (T_KWDataPattern . share) s)) }
h u b e r | n o r m H u b e r
    { tok (\p s -> PT p (eitherResIdent (T_PDoubleFun . share) s)) }
s q r t | s i n | c o s | t a n | e x p | l o g | s i n h | c o s h | t a n h | a s i n | a c o s | a t a n | a s i n h | a c o s h | a t a n h | x R e | x I m | f t | n o r m 2 s q u a r e | s u m E l e m e n t s
    { tok (\p s -> PT p (eitherResIdent (T_PUnaryFun . share) s)) }
\-
    { tok (\p s -> PT p (eitherResIdent (T_TokenSub . share) s)) }
\+
    { tok (\p s -> PT p (eitherResIdent (T_TokenPlus . share) s)) }
\+ \:
    { tok (\p s -> PT p (eitherResIdent (T_TokenReIm . share) s)) }
\*
    { tok (\p s -> PT p (eitherResIdent (T_TokenMul . share) s)) }
\/
    { tok (\p s -> PT p (eitherResIdent (T_TokenDiv . share) s)) }
\* \.
    { tok (\p s -> PT p (eitherResIdent (T_TokenScale . share) s)) }
\< \. \>
    { tok (\p s -> PT p (eitherResIdent (T_TokenDot . share) s)) }
\^
    { tok (\p s -> PT p (eitherResIdent (T_TokenPower . share) s)) }
r o t a t e
    { tok (\p s -> PT p (eitherResIdent (T_TokenRotate . share) s)) }
c a s e
    { tok (\p s -> PT p (eitherResIdent (T_TokenCase . share) s)) }
$d +
    { tok (\p s -> PT p (eitherResIdent (T_PInteger . share) s)) }
$d + \. $d + (e \- ? $d +)?
    { tok (\p s -> PT p (eitherResIdent (T_PDouble . share) s)) }
$l ($l | $d | \_ | \')*
    { tok (\p s -> PT p (eitherResIdent (T_PIdent . share) s)) }

$l $i*
    { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (\p s -> PT p (TL $ share $ unescapeInitTail s)) }




{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_SolverName !String
 | T_KWDataPattern !String
 | T_PDoubleFun !String
 | T_PUnaryFun !String
 | T_TokenSub !String
 | T_TokenPlus !String
 | T_TokenReIm !String
 | T_TokenMul !String
 | T_TokenDiv !String
 | T_TokenScale !String
 | T_TokenDot !String
 | T_TokenPower !String
 | T_TokenRotate !String
 | T_TokenCase !String
 | T_PInteger !String
 | T_PDouble !String
 | T_PIdent !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos [] = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_SolverName s) -> s
  PT _ (T_KWDataPattern s) -> s
  PT _ (T_PDoubleFun s) -> s
  PT _ (T_PUnaryFun s) -> s
  PT _ (T_TokenSub s) -> s
  PT _ (T_TokenPlus s) -> s
  PT _ (T_TokenReIm s) -> s
  PT _ (T_TokenMul s) -> s
  PT _ (T_TokenDiv s) -> s
  PT _ (T_TokenScale s) -> s
  PT _ (T_TokenDot s) -> s
  PT _ (T_TokenPower s) -> s
  PT _ (T_TokenRotate s) -> s
  PT _ (T_TokenCase s) -> s
  PT _ (T_PInteger s) -> s
  PT _ (T_PDouble s) -> s
  PT _ (T_PIdent s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "[" 16 (b "=" 8 (b "->" 4 (b ")" 2 (b "(" 1 N N) (b "," 3 N N)) (b ";" 6 (b ":" 5 N N) (b "<=" 7 N N))) (b "File" 12 (b ">=" 10 (b "==" 9 N N) (b "Dataset" 11 N N)) (b "Pattern" 14 (b "Image" 13 N N) (b "Random" 15 N N)))) (b "minimize" 24 (b "constraint" 20 (b "constant" 18 (b "]" 17 N N) (b "constants" 19 N N)) (b "it" 22 (b "constraints" 21 N N) (b "let" 23 N N))) (b "variables" 28 (b "solver" 26 (b "otherwise" 25 N N) (b "variable" 27 N N)) (b "}" 30 (b "{" 29 N N) N)))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
