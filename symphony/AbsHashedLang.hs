-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsHashedLang where

newtype SolverName = SolverName String
  deriving (Eq, Ord, Show, Read)

newtype KWDataPattern = KWDataPattern String
  deriving (Eq, Ord, Show, Read)

newtype PDoubleFun = PDoubleFun ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PUnaryFun = PUnaryFun ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenSub = TokenSub ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenPlus = TokenPlus ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenReIm = TokenReIm ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenMul = TokenMul ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenDiv = TokenDiv ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenScale = TokenScale ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenDot = TokenDot ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenPower = TokenPower ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenRotate = TokenRotate ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype TokenCase = TokenCase ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PInteger = PInteger ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PDouble = PDouble ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Problem = Problem [Block]
  deriving (Eq, Ord, Show, Read)

data Block
    = BlockVariable [[VariableDecl]]
    | BlockConstant [[ConstantDecl]]
    | BlockConstraint [[ConstraintDecl]]
    | BlockLet [[LetDecl]]
    | BlockMinimize Exp
    | BlockSolver SolverName
  deriving (Eq, Ord, Show, Read)

data TInt = IntPos PInteger | IntNeg TokenSub PInteger
  deriving (Eq, Ord, Show, Read)

data TDouble = DoublePos PDouble | DoubleNeg TokenSub PDouble
  deriving (Eq, Ord, Show, Read)

data Number = NumInt TInt | NumDouble TDouble
  deriving (Eq, Ord, Show, Read)

data Val
    = ValFile String
    | ValDataset String String
    | ValPattern KWDataPattern
    | ValRandom
    | ValImage String
    | ValLiteral Number
  deriving (Eq, Ord, Show, Read)

data Dim = Dim PInteger
  deriving (Eq, Ord, Show, Read)

data Shape
    = ShapeScalar | Shape1D Dim | Shape2D Dim Dim | Shape3D Dim Dim Dim
  deriving (Eq, Ord, Show, Read)

data VariableDecl
    = VariableNoInit PIdent Shape | VariableWithInit PIdent Shape Val
  deriving (Eq, Ord, Show, Read)

data ConstantDecl = ConstantDecl PIdent Shape Val
  deriving (Eq, Ord, Show, Read)

data LetDecl = LetDecl PIdent Exp
  deriving (Eq, Ord, Show, Read)

data Bound = ConstantBound PIdent | NumberBound Number
  deriving (Eq, Ord, Show, Read)

data ConstraintDecl
    = ConstraintLower Exp Bound
    | ConstraintUpper Exp Bound
    | ConstraintEqual Exp Bound
  deriving (Eq, Ord, Show, Read)

data RotateAmount
    = RA1D TInt | RA2D TInt TInt | RA3D TInt TInt TInt
  deriving (Eq, Ord, Show, Read)

data PiecewiseCase
    = PiecewiseCase Number Exp | PiecewiseFinalCase Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EPlus Exp TokenPlus Exp
    | ERealImag Exp TokenReIm Exp
    | ESubtract Exp TokenSub Exp
    | EMul Exp TokenMul Exp
    | EDiv Exp TokenDiv Exp
    | EScale Exp TokenScale Exp
    | EDot Exp TokenDot Exp
    | EPower Exp TokenPower TInt
    | EDoubleFun PDoubleFun Number Exp
    | EUnaryFun PUnaryFun Exp
    | ERotate TokenRotate RotateAmount Exp
    | ENegate TokenSub Exp
    | ENumDouble PDouble
    | ENumInteger PInteger
    | EIdent PIdent
    | EPiecewise TokenCase Exp [PiecewiseCase]
  deriving (Eq, Ord, Show, Read)

